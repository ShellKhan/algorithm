# Задание 3.
# Массив размером 2m + 1, где m — натуральное число, заполнен случайным образом. Найдите в массиве медиану.
# Задачу следует решить без сортировки массива!!!
# Чтобы не портить унификацию записи задач (и чтобы в гитлабе смотрелось красиво), вместо m я использовал SIZE.
# Разброс значений уменьшен, чтобы чаще попадались повторы - так интереснее.
# Для удобства проверки после решения задачи массив сортируется стандартной функцией и выводится он сам и его медиана.

import random

SIZE = 20
MIN_ITEM = 0
MAX_ITEM = 20


def mediana_search(mylist: list) -> int:
    """
    Перебираем значения в списке, проверяем каждое внутренней функцией. Так эстетичнее и лучше читается, чем в одном
    цикле городить другой, да еще и с дополнительным ветвлением.
    """

    def mediana_check(mylist: list, val: int) -> bool:
        """
        Считаем, сколько значений в списке больше, меньше и равно проверяемому. Если проверяемое - медиана, либо
        счетчики больших и меньших значений будут равны, либо больший из них будет меньше, чем сумма второго и счетчика
        равных значений. Соответственно, не медиана - в случае, когда больший из счетчиков больших и меньших значений
        будет также больше суммы меньшего и счетчика равных значений. Чтобы не делать строку слишком длинной, я разнес
        по отдельности случаи, когда больше счетчик больших и когда счетчик меньших.
        """
        c_bigger = 0
        c_smaller = 0
        c_equal = 0
        for i in mylist:
            if i > val:
                c_bigger += 1
            elif i < val:
                c_smaller += 1
            else:
                c_equal += 1
        if (c_smaller > c_bigger) and (c_smaller > (c_bigger + c_equal)):
            return False
        elif (c_bigger > c_smaller) and (c_bigger > (c_smaller + c_equal)):
            return False
        else:
            return True

    for i in mylist:
        if mediana_check(mylist, i):
            return i


array = [random.randint(MIN_ITEM, MAX_ITEM) for _ in range((2 * SIZE) + 1)]
print(array)
print(mediana_search(array))
s_array = sorted(array)
print(s_array)
print(s_array[SIZE])
